{"ast":null,"code":"import _objectSpread from \"/home/leo/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/projects/react-test/reactReduxTodo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { RequestState, GET_TASKS, GET_USERS, SET_TASK, SET_LOAD } from \"../../utils/constants\";\nvar initialState = {\n  tasks: [],\n  users: [],\n  load: false\n};\nexport default (function () {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_TASKS + RequestState.SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, data), {}, {\n          tasks: Object.values(action.payload),\n          load: false\n        });\n      }\n\n    case GET_TASKS + RequestState.FAIL:\n      {\n        return _objectSpread(_objectSpread({}, data), {}, {\n          tasks: [],\n          load: false\n        });\n      }\n\n    case GET_USERS + RequestState.SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, data), {}, {\n          users: Object.values(action.payload),\n          load: false\n        });\n      }\n\n    case GET_USERS + RequestState.FAIL:\n      {\n        return _objectSpread(_objectSpread({}, data), {}, {\n          users: [],\n          load: false\n        });\n      }\n\n    case SET_TASK:\n      {\n        return _objectSpread(_objectSpread({}, data), {}, {\n          tasks: data.tasks.map(function (item) {\n            return item.id === action.payload.id ? action.payload : item;\n          })\n        });\n      }\n\n    case SET_LOAD:\n      {\n        return _objectSpread(_objectSpread({}, data), {}, {\n          load: action.payload\n        });\n      }\n\n    default:\n      return data;\n  }\n});","map":{"version":3,"sources":["/home/leo/Документы/projects/react-test/reactReduxTodo/src/components/tasks/reducer.ts"],"names":["RequestState","GET_TASKS","GET_USERS","SET_TASK","SET_LOAD","initialState","tasks","users","load","data","action","type","SUCCESS","Object","values","payload","FAIL","map","item","id"],"mappings":";AAAA,SACEA,YADF,EAEEC,SAFF,EAGEC,SAHF,EAIEC,QAJF,EAKEC,QALF,QAMO,uBANP;AASA,IAAMC,YAAY,GAAG;AAAEC,EAAAA,KAAK,EAAE,EAAT;AAAaC,EAAAA,KAAK,EAAE,EAApB;AAAwBC,EAAAA,IAAI,EAAE;AAA9B,CAArB;AAEA,gBAAe,YAGV;AAAA,MAFHC,IAEG,uEAFSJ,YAET;AAAA,MADHK,MACG;;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,SAAS,GAAGD,YAAY,CAACY,OAA9B;AAAuC;AACrC,+CAAYH,IAAZ;AAAkBH,UAAAA,KAAK,EAAEO,MAAM,CAACC,MAAP,CAAcJ,MAAM,CAACK,OAArB,CAAzB;AAAwDP,UAAAA,IAAI,EAAE;AAA9D;AACD;;AACD,SAAKP,SAAS,GAAGD,YAAY,CAACgB,IAA9B;AAAoC;AAClC,+CAAYP,IAAZ;AAAkBH,UAAAA,KAAK,EAAE,EAAzB;AAA6BE,UAAAA,IAAI,EAAE;AAAnC;AACD;;AACD,SAAKN,SAAS,GAAGF,YAAY,CAACY,OAA9B;AAAuC;AACrC,+CAAYH,IAAZ;AAAkBF,UAAAA,KAAK,EAAEM,MAAM,CAACC,MAAP,CAAcJ,MAAM,CAACK,OAArB,CAAzB;AAAwDP,UAAAA,IAAI,EAAE;AAA9D;AACD;;AACD,SAAKN,SAAS,GAAGF,YAAY,CAACgB,IAA9B;AAAoC;AAClC,+CAAYP,IAAZ;AAAkBF,UAAAA,KAAK,EAAE,EAAzB;AAA6BC,UAAAA,IAAI,EAAE;AAAnC;AACD;;AACD,SAAKL,QAAL;AAAe;AACb,+CACKM,IADL;AAEEH,UAAAA,KAAK,EAAEG,IAAI,CAACH,KAAL,CAAWW,GAAX,CAAe,UAACC,IAAD;AAAA,mBACpBA,IAAI,CAACC,EAAL,KAAYT,MAAM,CAACK,OAAP,CAAeI,EAA3B,GAAgCT,MAAM,CAACK,OAAvC,GAAiDG,IAD7B;AAAA,WAAf;AAFT;AAMD;;AACD,SAAKd,QAAL;AAAe;AACb,+CAAYK,IAAZ;AAAkBD,UAAAA,IAAI,EAAEE,MAAM,CAACK;AAA/B;AACD;;AAED;AACE,aAAON,IAAP;AA1BJ;AA4BD,CAhCD","sourcesContent":["import {\n  RequestState,\n  GET_TASKS,\n  GET_USERS,\n  SET_TASK,\n  SET_LOAD\n} from \"../../utils/constants\";\nimport { TaskInterface } from \"./types\";\nimport { taskReducerIntrtface } from \"../../store/types\";\nconst initialState = { tasks: [], users: [], load: false };\n\nexport default (\n  data: any = initialState,\n  action: { type: string; payload?: any }\n) => {\n  switch (action.type) {\n    case GET_TASKS + RequestState.SUCCESS: {\n      return { ...data, tasks: Object.values(action.payload), load: false };\n    }\n    case GET_TASKS + RequestState.FAIL: {\n      return { ...data, tasks: [], load: false };\n    }\n    case GET_USERS + RequestState.SUCCESS: {\n      return { ...data, users: Object.values(action.payload), load: false };\n    }\n    case GET_USERS + RequestState.FAIL: {\n      return { ...data, users: [], load: false };\n    }\n    case SET_TASK: {\n      return {\n        ...data,\n        tasks: data.tasks.map((item: TaskInterface) =>\n          item.id === action.payload.id ? action.payload : item\n        )\n      };\n    }\n    case SET_LOAD: {\n      return { ...data, load: action.payload };\n    }\n\n    default:\n      return data;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}