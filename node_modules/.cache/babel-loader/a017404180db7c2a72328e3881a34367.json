{"ast":null,"code":"import { GET_TASKS, GET_USERS, SET_TASK, SET_LOAD } from \"../../utils/constants\";\nimport { RequestState } from \"../../utils/constants\";\nexport var getTasks = function getTasks() {\n  return function (dispatch) {\n    dispatch(setLoad(true));\n    fetch(\"https://jsonplaceholder.typicode.com/todos/\").then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      dispatch({\n        type: GET_TASKS + RequestState.SUCCESS,\n        payload: json\n      });\n    }).catch(function (error) {\n      dispatch({\n        type: GET_TASKS + RequestState.FAIL\n      });\n    });\n  };\n};\nexport var getUsers = function getUsers() {\n  return function (dispatch) {\n    dispatch(setLoad(true));\n    fetch(\"https://jsonplaceholder.typicode.com/users/\").then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      dispatch({\n        type: GET_USERS + RequestState.SUCCESS,\n        payload: json\n      });\n    }).catch(function (error) {\n      dispatch({\n        type: GET_USERS + RequestState.FAIL\n      });\n    });\n  };\n};\nexport var setTask = function setTask(task) {\n  return function (dispatch) {\n    dispatch({\n      type: SET_TASK,\n      payload: task\n    });\n  };\n};\nexport var setLoad = function setLoad(status) {\n  return function (dispatch) {\n    dispatch({\n      type: SET_LOAD,\n      payload: status\n    });\n  };\n};","map":{"version":3,"sources":["/home/leo/Документы/projects/react-test/reactReduxTodo/src/components/tasks/action.ts"],"names":["GET_TASKS","GET_USERS","SET_TASK","SET_LOAD","RequestState","getTasks","dispatch","setLoad","fetch","then","response","json","type","SUCCESS","payload","catch","error","FAIL","getUsers","setTask","task","status"],"mappings":"AAAA,SACEA,SADF,EAEEC,SAFF,EAGEC,QAHF,EAIEC,QAJF,QAKO,uBALP;AAMA,SAASC,YAAT,QAA6B,uBAA7B;AAIA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAM,UAACC,QAAD,EAAmB;AAC/CA,IAAAA,QAAQ,CAACC,OAAO,CAAC,IAAD,CAAR,CAAR;AACAC,IAAAA,KAAK,CAAC,6CAAD,CAAL,CACGC,IADH,CACQ,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KADhB,EAEGF,IAFH,CAEQ,UAAAE,IAAI,EAAI;AACZL,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEZ,SAAS,GAAGI,YAAY,CAACS,OAAjC;AAA0CC,QAAAA,OAAO,EAAEH;AAAnD,OAAD,CAAR;AACD,KAJH,EAKGI,KALH,CAKS,UAAAC,KAAK,EAAI;AACdV,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEZ,SAAS,GAAGI,YAAY,CAACa;AAAjC,OAAD,CAAR;AACD,KAPH;AAQD,GAVuB;AAAA,CAAjB;AAYP,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAM,UAACZ,QAAD,EAAmB;AAC/CA,IAAAA,QAAQ,CAACC,OAAO,CAAC,IAAD,CAAR,CAAR;AACAC,IAAAA,KAAK,CAAC,6CAAD,CAAL,CACGC,IADH,CACQ,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KADhB,EAEGF,IAFH,CAEQ,UAAAE,IAAI,EAAI;AACZL,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEX,SAAS,GAAGG,YAAY,CAACS,OAAjC;AAA0CC,QAAAA,OAAO,EAAEH;AAAnD,OAAD,CAAR;AACD,KAJH,EAKGI,KALH,CAKS,UAAAC,KAAK,EAAI;AACdV,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEX,SAAS,GAAGG,YAAY,CAACa;AAAjC,OAAD,CAAR;AACD,KAPH;AAQD,GAVuB;AAAA,CAAjB;AAYP,OAAO,IAAME,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD;AAAA,SAAyB,UAC9Cd,QAD8C,EAE3C;AACHA,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,IAAI,EAAEV,QAAR;AAAkBY,MAAAA,OAAO,EAAEM;AAA3B,KAAD,CAAR;AACD,GAJsB;AAAA,CAAhB;AAKP,OAAO,IAAMb,OAAO,GAAG,SAAVA,OAAU,CAACc,MAAD;AAAA,SAAqB,UAC1Cf,QAD0C,EAEvC;AACHA,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,IAAI,EAAET,QAAR;AAAkBW,MAAAA,OAAO,EAAEO;AAA3B,KAAD,CAAR;AACD,GAJsB;AAAA,CAAhB","sourcesContent":["import {\n  GET_TASKS,\n  GET_USERS,\n  SET_TASK,\n  SET_LOAD\n} from \"../../utils/constants\";\nimport { RequestState } from \"../../utils/constants\";\nimport { TaskInterface, SetTaskInterface, SetLoadInterface } from \"./types\";\nimport { Dispatch } from \"redux\";\n\nexport const getTasks = () => (dispatch: any) => {\n  dispatch(setLoad(true));\n  fetch(\"https://jsonplaceholder.typicode.com/todos/\")\n    .then(response => response.json())\n    .then(json => {\n      dispatch({ type: GET_TASKS + RequestState.SUCCESS, payload: json });\n    })\n    .catch(error => {\n      dispatch({ type: GET_TASKS + RequestState.FAIL });\n    });\n};\n\nexport const getUsers = () => (dispatch: any) => {\n  dispatch(setLoad(true));\n  fetch(\"https://jsonplaceholder.typicode.com/users/\")\n    .then(response => response.json())\n    .then(json => {\n      dispatch({ type: GET_USERS + RequestState.SUCCESS, payload: json });\n    })\n    .catch(error => {\n      dispatch({ type: GET_USERS + RequestState.FAIL });\n    });\n};\n\nexport const setTask = (task: TaskInterface) => (\n  dispatch: Dispatch<SetTaskInterface>\n) => {\n  dispatch({ type: SET_TASK, payload: task });\n};\nexport const setLoad = (status: boolean) => (\n  dispatch: Dispatch<SetLoadInterface>\n) => {\n  dispatch({ type: SET_LOAD, payload: status });\n};\n"]},"metadata":{},"sourceType":"module"}